1) Клиент серверная архитектура.

	Клиент серверная архитектура - архитектура, в которой нагрузка распределена между клиентом и сервером.
Основная бизнес - логика просчитывается на сервере, а клиент же делает запросы на сервер и визуализирует ответы сервера.
На сервере стоит софт, который принимает запросы со стороны клиента. На клиенте же стоит софт, способный отправлять эти запросы и
принимать ответы.
	Многоуровневые клиент - серверные архитектуры состоят из кластеров серверов, баз данных и балансировщиков между ними:
клиент -> балансировщик -> сервер -> балансировщик -> база данных.
Балансировщики нужны для распределения нагрузки между серверами.

2) HTTP и HTTPS

HTTP (Hyper Text Transfer Protocol) - протокол передачи текста прикладного уровня. Передавать можно любые данные. Передача происходит
в виде текста.
HTTPS - тот же HTTP, только зашифрованный. Данные шифруются с помощью протокола TLS. Так предотвращаются атаки man in the middle, сниферские.

3) HTTP методы

HTTP методы - это ключевые слова, которые указывают на ту или иную операцию, которую необходимо выполнить серверу. 
Есть множество методов. Основные методы: GET, POST, PUT, DELETE, HEAD, OPTION, PATCH, TRACE. 

GET - используется для запроса содержимого указанного ресурса
POST - используется для передачи данных заданному ресурсу (можно обновлять старые данные)
PUT - используется для загрузки данных на ресурс
DELETE - удаляет указанные данные в ресурсе
HEAD - аналогичен GET, но возвращает только заголовки (хэдеры), а GET возвращает еще и тело ответа.
OPTION - используется для определения возможностей веб-сервера
PATCH - аналогичен PUT, но применяется к фрагменту ресурса
TRACE - Возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе. 
Как бы трассирует путь данных.

4) HTTP статус коды сервера

Статус коды - это коды ответа, состояния, показывающие результат выполнения запроса.
Есть 5 основных классов статус кодов:
100-е, 200-е, 300-е, 400-е, 500-е

100 - информационные коды
200 - коды успешного выполнения
300 - коды перенаправления
400 - коды ошибок со стороны клиента
500 - коды ошибок со стороны сервера

Но это лишь основные. Разработчики могут добавлять свои статус коды.

5) Ядро браузера 

Ядро браузера - модуль (программа), который отображает контент на основе языка разметки и движок JS. Движок JS отвечает за отработку скриптов на JS,
а за отображение веб страницы отвечает движок рендеринга. В разных браузерах эти ядры разные, поэтому и интерпритируют и отображают информацию они по разному.
Можно выделить пять основных ядер: Trident, Gecko, Presto, Webkit, Blink.

6) Какие браузеры какиие ядра используют

Для рендеринга:

Blink - Google Chrome, Opera 15+, Microsoft Edge
Gecko - Mozila Firefox
Presto - Opera
Edge HTML - Microsoft Edge
Trident - Internet Explorer
WebKit - Google Chrome, Safari

Для отработки JS:

Chakra JScript - Internet Explorer
Nitro - Safari
V8 - Google Chrome
SpiderMonkey - Mozila Firefox

7) API

	API (Aplication Programming Interface) - интерфейс программирования приложений. Грубо говоря, это некоторый набо правил, по которым программы взаимодействуют друг с другом.
Можно провести анологию с рестораном. Ты - клиент и ты хочешь от повара получить определенное блюдо. Официант принимает заказ и передает повару. Повар готовит, отдает официанту
и тот приносит вам то, что вы заказали. В данном примере официант выступает в роли API между вами - клиентом и поваром.
	API-интерфейсы состоят из двух связанных элементов. Первый – это спецификация, описывающая, как происходит обмен информацией между программами в форме запроса на обработку и возврата необходимых данных. 
Второй – это программный интерфейс, написанный в соответствии с этой спецификацией и каким-то образом опубликованный для использования.

8) Эндпоинты

Эндпоинт - это часть URL, которая указывает, куда надо стучаться в API

9) URL (URI, URN)

 URL - Uniform Resource Locator (унифицированный определитель местонахождения ресурса)
 URN - Unifrorm Resource Name (унифицированное имя ресурса)
 URI - Uniform Resource Identifier (унифицированный идентификатор ресурса)
